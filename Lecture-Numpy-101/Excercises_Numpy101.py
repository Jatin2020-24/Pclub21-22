# -*- coding: utf-8 -*-
"""Excercises : Numpy 101

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NrDyCCgbjvROYF1zWz9WUKgFR4X4cc3W

### Link to the orginal author's work : [Kaggle](https://www.kaggle.com/rajacsp/numpy-cheatsheet-125-exercises/data)

I just cleaned it up,proofread and changed it to fit our needs.
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os

import warnings
warnings.filterwarnings('ignore')

# This will help us in truncating the longer array
np.set_printoptions(threshold = 100)

"""<a id="top"></a>

<div class="list-group" id="list-tab" role="tablist">

<font color="teal" size=+1><b>Content List</b></font>
    
* [0. Numpy version](#00)
* [1. Create an empty array](#01)
* [2. Check whether the array is empty](#02)
* [3. Check elements count](#03)
* [4. Arrange numpy between numbers](#04)
* [5. Arrange numpy between numbers with intervals](#05)
* [6. Array reshape](#06)
* [7. Create a numpy with random integers](#07)
* [8. Create a numpy with random integers and size](#08)
* [9. Array of strings](#09)
* [10. Numpy array with strings and explicit dtype](#10)
* [11. Numpy array with strings and explicit dtype](#11)
* [12. Print without truncation](#12)
* [13. Save Numpy to CSV](#13)
* [14. Dataframe to Numpy](#14)
* [15. Get the nth column of an array](#15)
* [16. Reshape with -1 (lazy option)](#16)
* [17. Numpy with precision](#17)
* [18. Argsort on Numpy array](#18)
* [19. Numpy view](#19)
* [20. Using Flipud](#20)
* [21. Numpy inverse](#21)
* [22. Numpy Inverse](#22)
* [23. Numpy compare](#23)
* [24. Numpy compare with nonzero count](#24)
* [25. Flip a numpy array by using flipud](#25)
* [26. Flip a numpy array by using flipud without sharing the memory](#26)
* [27. Flip a numpy array by using fliplr (horizontally)](#27)
* [28. Flip a numpy array by using flip (both horizontally and vertically)](#28)
* [29. Flipping the numpy array using slices](#29)
* [30. Convert numpy array to list](#30)
* [31. Numpy Where](#31)
* [32. Numpy where with multiple conditions](#32)
* [33. Numpy where with multiple conditions - apply only on matching conditions](#33)
* [34. Process with where](#34)
* [35. List to numpy array](#35)
* [36. List to numpy array with explicit dtype](#36)
* [37. 2D list to numpy array](#37)
* [38. Convert list to float numpy array](#38)
* [39. Convert list to numpy array with explicit datatype](#39)
* [40. Find common values between two numpy array](#40)
* [41. Get today in numpy and deltas](#41)
* [42. Between two Dates](#42)
* [43. Random array and sorting](#43)
* [44. Random int array and sorting](#44)
* [45. String to nump,y array](#45)
* [46. Find the nearest element in the array](#46)
* [47. Swap rows](#47)
* [48. Shuffle](#48)
* [49. Get specific element](#49)
* [50. Repeat an array](#50)
* [51. Min, Max, Sum](#51)
* [52. Get min of axis = 1](#52)
* [53. Using amin function](#53)
* [54. Using amax function](#54)
* [55. Get min of axis = 0](#55)
* [56. Calculate 90th percentile of an axis](#56)
* [57. Find median](#57)
* [58. Covariance matrix](#58)
* [59. Pearson product-moment correlation](#59)
* [60. Cross correlation](#60)
* [61. Count the number of occurrences](#61)
* [62. Create random int numpy array with specific shape](#62)
* [63. Create 4 different integers from 0, 40. ](#63)
* [64. Create 4 different integers from 0, 4. ](#64)
* [65. Shuffle](#65)
* [66. Shuffling by permutation](#66)
* [67. Seed for random](#67)
* [68. Get unique elements](#68)
* [69. Create a boolean array with a shape of x](#69)
* [70. Find unique intersection](#70)
* [71. Find the diff](#71)
* [72. Trying to inverse a singular matrix](#72)
* [73. Find the union](#73)
* [74. Element Sum](#74)
* [75. Pretty print - suppress the scientific notation](#75)
* [76. Print with decimal format](#76)
* [77. Convert flot array to int array](#77)
* [78. array vs asarray](#78)
* [79. Numpy Datetime](#79)
* [80. Numpy Datetime with arange](#80)
* [81. Compare Numpy datetime](#81)
* [82. Numpy 2D array flat list](#82)
* [83. Numpy 2D array to flat list](#83)
* [84. Numpy array to Pandas Dataframe](#84)
* [85. Numpy to Dataframe by using from_records](#85)
* [86. Append with hstack](#86)
* [87. Ravel vs. Flatten](#87)
* [88. Ravel and Flatten with assignment](#88)
* [89. Numpy Concatenate](#89)
* [90. Reverse 1D array](#90)
* [91. Reverse 2D Array](#91)
* [92. Reverse 2D array with elements](#92)
* [93. Image as an array](#93)
* [94. Array with prefilled values](#94)
* [95. Delete specific indices](#95)
* [96. Deleting specific elements](#96)
* [97. Boolean Numpy Array](#97)
* [98. Array of NaN](#98)
* [99. Replace values with specific condition](#99)
* [100. Selecting specific columns](#100)  
* [101. Vectorize](#101)
* [102. If condition on Numpy array on the fly](#102)
* [103. If condition and sum on Numpy colum](#103)
* [104. Using Vectorize function on Numpy](#104)
* [105. Apply Along Axis on Numpy Matrix](#105)
* [106. Sort the arry by using](#106)
* [107. Numpy Roll](#107)
* [108. Roll elements](#108)
* [109. Array Append on Axis 0 and Axis 1](#109)
* [110. Rearrange array with specified index](#110)
* [111. Serialize array with pickle](#111)
* [112. Transpose](#112)
* [113. Continguous Array](#113)
* [114. Numpy Reshape with Order](#114)  
* [115. Element-wise math](#115)  
* [116. Where with multiple condition](#116)  
* [117. Subtract Outer](#117)  
* [118. Multiply Outer](#118)  
* [119. Immutable Array](#119)  
* [120. Float anomalies in Numpy Arange](#120)  
* [121. Complex number and absolute value](#121)  
* [122. Set Error in Numpy](#122)  
* [123. Convert List of List String to Numpy Array](#123)  
* [124. Resize a list with rounds](#124)  
* [125. Print columns by index](#125)  
* [126. Initalize array with tuples](#126)  
* [127. Rearrange with permutation](#127)  

"""

# for i in range(114, 128):
#     print(f'* [{i}. ](#{i})  ')

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="00"></a>
        <font><b>Task 00:</b></font>
        <br><br>
        Numpy version
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 0. Numpy version

np.__version__

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="01"></a>
        <font><b>Task 01:</b></font>
        <br><br>
        Create an empty array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 1. Create an empty array

empty_array = np.empty([2, 2], int)

print(empty_array)

print(empty_array.shape)

print(empty_array.size)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="02"></a>
        <font><b>Task 02:</b></font>
        <br><br>
        Check whether the array is empty
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 2. Check whether the array is empty

a = np.array([])
b = np.array([1, 2])

def check_empty(a):
    if a.size == 0:
        print(a, ' : Empty')
    else:
        print(b, ' : Non Empty')
        
check_empty(a)
check_empty(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="03"></a>
        <font><b>Task 03:</b></font>
        <br><br>
        Check elements count
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 3. Check elements count

c = np.array([])
d = np.array([1, 2])

def get_elements(c_array):
    return c_array.ndim and c_array.size
        
print(c, ', elements_count : ', get_elements(c))
print(d, ', elements_count : ', get_elements(d))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="04"></a>
        <font><b>Task 04:</b></font>
        <br><br>
        Arrange numpy between numbers
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 4. Arrange numpy between numbers

a = np.arange(4, 12)

print(a)
print(a, '.shape : ', a.shape)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="05"></a>
        <font><b>Task 05:</b></font>
        <br><br>
        Arrange numpy between numbers with intervals
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 5. Arrange numpy between numbers with intervals

c = np.arange(12, 30, 3)

print(c)
print(c, '.shape : ', c.shape)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="06"></a>
        <font><b>Task 06:</b></font>
        <br><br>
        Array reshape
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 6. Array reshape

c = np.arange(12, 30, 3)
d = c.reshape(2, 3)

print(c)
print(c, '.shape : ', c.shape)
print('\nAfter reshaping : ')
print(d)
print(d, '.shape : ', d.shape)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="07"></a>
        <font><b>Task 07:</b></font>
        <br><br>
        Create a numpy with random integers
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 7. Create a numpy with random integers

a = np.random.randint(10, size = 5)

print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="08"></a>
        <font><b>Task 08:</b></font>
        <br><br>
        Create a numpy with random integers and size
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 8. Create a numpy with random integers and size

a = np.random.randint(10, size = (2, 3))

print(a)
print(a, '.shape : ', a.shape)
print('datatype : ', a.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="09"></a>
        <font><b>Task 09:</b></font>
        <br><br>
        Array of strings
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 9. Array of strings

a = np.array(('Toronto','Montreal','New York'))
print(a)
print(a.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="10"></a>
        <font><b>Task 10:</b></font>
        <br><br>
        Numpy array with strings and explicit dtype
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 10. Numpy array with strings and explicit dtype

x = np.array(['Toronto', 'Montreal'], dtype=str)

print(x)
print(x.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="11"></a>
        <font><b>Task 11:</b></font>
        <br><br>
        Numpy array with strings and explicit dtype
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 11. Numpy array with strings and explicit dtype

x = np.array(['To'], dtype=str)
y = x.view('S1').reshape(x.size, -1)

print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="12"></a>
        <font><b>Task 12:</b></font>
        <br><br>
        Print without truncation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 12. Print without truncation

x = np.arange(10000)

print('Before setting print options : ')
print(x) # this will print with the truncation

# set
import sys
# np.set_printoptions(threshold = sys.maxsize)

# print('\nAfter setting print options : ')
# print(a) # this will print everything without truncation

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="13"></a>
        <font><b>Task 13:</b></font>
        <br><br>
        Save Numpy to CSV
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 13. Save Numpy to CSV

a = np.asarray([ [1,2,3], [4,5,6]])
print(a)
# numpy.savetxt("abc.csv", a, delimiter=",") # this will save the numpy to csv file

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="14"></a>
        <font><b>Task 14:</b></font>
        <br><br>
        Dataframe to Numpy
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 14. Dataframe to Numpy

df = pd.DataFrame({'a1': [1, 2, 3], 'a2': [4, 5, 6]}, index = ['X', 'Y', 'Z'])

print('Dataframe:')
print(df)

x = df.to_numpy()

print('\nDataframe to Numpy:')
print(x)

y = df.index.to_numpy()
print('\nDataframe Indices to Numpy:')
print(y)

z = df['a1'].to_numpy()
print('\nDataframe Series to Numpy:')
print(z)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="15"></a>
        <font><b>Task 15:</b></font>
        <br><br>
        Get the nth column of an array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 15. Get the nth column of an array

x = np.array([[1, 2], [3, 4], [5, 6]])

print('Numpy array:')
print(x)

y = x[:,0]
print('\nx[:,0]:')
print(y)

z = x[:, 1]
print('\nx[:, 1]:')
print(z)

a = x[1,:]
print('\nx[1,:]:')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="16"></a>
        <font><b>Task 16:</b></font>
        <br><br>
        Reshape with -1 (lazy option)
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 16. Reshape with -1 (lazy option)

a = np.matrix([[1, 2, 3, 4], [5, 6, 7, 8], [10, 11, 12, 21]])
print('Original Numpy Array:')
print(a)
print('original shape: ', a.shape)

c = np.reshape(a, -1)
print('\nnp.reshape(a, -1):')
print(c)
print('new shape: ', c.shape)

d = np.reshape(a, (1, -1))
print('\nnp.reshape(a, (1, -1)):')
print(d)
print('new shape: ', d.shape)

e = np.reshape(a, (2, -1))
print('\nnp.reshape(a, (2, -1)):')
print(e)
print('new shape: ', e.shape)

f = np.reshape(a, (3, -1))
print('\nnp.reshape(a, (3, -1)):')
print(f)
print('new shape: ', f.shape)

g = np.reshape(a, (4, -1))
print('\nnp.reshape(a, (4, -1)):')
print(g)
print('new shape: ', g.shape)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="17"></a>
        <font><b>Task 17:</b></font>
        <br><br>
        Numpy with precision
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 17. Numpy with precision

x = np.random.random(10)

print('Original Array:')
print(x)

print('\nAfter setting presicion:')
np.set_printoptions(precision = 2)
print(x)

# resetting precision to default (8)
np.set_printoptions(precision = 8)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="18"></a>
        <font><b>Task 18:</b></font>
        <br><br>
        Argsort on Numpy array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 18. Argsort on Numpy array

a = np.random.randint(0, 10, (3,3))
print('Before : ')
print(a)

print('\nAfter : ')
b = a[a[: ,2].argsort()]
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="19"></a>
        <font><b>Task 19:</b></font>
        <br><br>
        Numpy view
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 19. Numpy view

x = np.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
print(x)
print(x.dtype)

y = x.view(dtype=np.int16, type=np.matrix)
print(y)
print(y.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="20"></a>
        <font><b>Task 20:</b></font>
        <br><br>
        Using Flipud
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>

<div style="">
    <div style="float: left; width: 80%;">
        <a id="21"></a>
        <font><b>Task 21:</b></font>
        <br><br>
        Numpy inverse
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 21. Numpy inverse

b = np.array([[2,3],[4,5]])
print('Before Inverse : ')
print(b)

c = np.linalg.inv(b)
print('After Inverse : ')
print(c)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="22"></a>
        <font><b>Task 22:</b></font>
        <br><br>
        Numpy Inverse
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 22. Numpy Inverse

x = np.matrix([[10, 20], [60, 70]])
print('Before Inverse : ')
print(x)

print('After Inverse : ')
print(x.I)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="23"></a>
        <font><b>Task 23:</b></font>
        <br><br>
        Numpy compare
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 23. Numpy compare

a = np.arange(12).reshape((3, 4))
print(a)

a_bool = a < 6
print(a_bool)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="24"></a>
        <font><b>Task 24:</b></font>
        <br><br>
        Numpy compare with nonzero count
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 24. Numpy compare with nonzero count

a = np.arange(12).reshape((3, 4))
print('Before : ')
print(a)

print(np.count_nonzero(a > 5))

print(a % 3 == 1)
print(np.count_nonzero(a % 3 == 1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="25"></a>
        <font><b>Task 25:</b></font>
        <br><br>
        Flip a numpy array by using flipud
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 25. Flip a numpy array by using flipud
# flipup = flip ud = up / down

a = np.arange(4).reshape(2, 2)
print('Before : ')
print(a)

print('\nAfter : ')
b = np.flipud(a)
print(b)

# Note: b returns a view 
print('Shared memory? :', np.shares_memory(a, b))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="26"></a>
        <font><b>Task 26:</b></font>
        <br><br>
        Flip a numpy array by using flipud without sharing the memory
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 26. Flip a numpy array by using flipud without sharing the memory

a = np.arange(4).reshape(2, 2)
print('Before : ')
print(a)

print('\nAfter : ')
b = np.flipud(a).copy()
print(b)

# Note: b returns a view 
print('Shared memory? :', np.shares_memory(a, b))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="27"></a>
        <font><b>Task 27:</b></font>
        <br><br>
        Flip a numpy array by using fliplr (horizontally)
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 27. Flip a numpy array by using fliplr (horizontally)

a = np.arange(10).reshape(2, 5)
print('Before : ')
print(a)

print('\nAfter : ')
b = np.fliplr(a)
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="28"></a>
        <font><b>Task 28:</b></font>
        <br><br>
        Flip a numpy array by using flip (both horizontally and vertically)
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 28. Flip a numpy array by using flip (both horizontally and vertically)

a = np.arange(10).reshape(2, 5)
print('Before : ')
print(a)

print('\nAfter : ')
b = np.flip(a)
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="29"></a>
        <font><b>Task 29:</b></font>
        <br><br>
        Flipping the numpy array using slices
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 29. Flipping the numpy array using slices

a = np.arange(10).reshape(2, 5)
print('Before : ')
print(a)

print('\nAfter : ')
b = a[::-1, ::-1]
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="30"></a>
        <font><b>Task 30:</b></font>
        <br><br>
        Convert numpy array to list
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 30. Convert numpy array to list

a = np.arange(10).reshape(2, 5)
print('Before : ')
print(a)
# print(d.dtype)
print(type(a))
print(type(a[0]))
print(type(a[0][0]))

b = a.tolist()
print('\nAfter : ')
print(b)
print(type(b))
print(type(b[0]))
print(type(b[0][0]))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="31"></a>
        <font><b>Task 31:</b></font>
        <br><br>
        Numpy Where
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div> 
"""

# 31. Numpy Where

a = np.arange(8).reshape((2, 4))
print('Before : ')
print(a)

print('\nAfter : ')
b = np.where(a < 4, 0, 20)
print(b)

# Note: it matches, replace with 0, if not replace with 20

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="32"></a>
        <font><b>Task 32:</b></font>
        <br><br>
        Numpy where with multiple conditions
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 32. Numpy where with multiple conditions

a = np.arange(8).reshape((2, 4))
print('Before : ')
print(a)

print('\nAfter : ')
b = np.where((a > 3) & (a < 7), 0, 20)
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="33"></a>
        <font><b>Task 33:</b></font>
        <br><br>
        Numpy where with multiple conditions - apply only on matching conditions
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 33. Numpy where with multiple conditions - apply only on matching conditions

a = np.arange(10).reshape((2, 5))
print('Before : ')
print(a)

print('\nAfter : ')
b = np.where((a > 3) & (a < 7), 0, a)
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="34"></a>
        <font><b>Task 34:</b></font>
        <br><br>
        Process with where
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 34. Process with where

a = np.arange(10).reshape((2, 5))
print('Before : ')
print(a)

print('\nAfter : ')
b = np.where((a > 3) & (a < 7),  a * 3, 0)
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="35"></a>
        <font><b>Task 35:</b></font>
        <br><br>
        List to numpy array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 35. List to numpy array

a = [0, 1, 2]
print('Before : ')
print(a)

print('\nAfter : ')
b = np.array(a)
print(b)
print(b.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="36"></a>
        <font><b>Task 36:</b></font>
        <br><br>
        List to numpy array with explicit dtype
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 36. List to numpy array with explicit dtype

a = [0, 1, 2]
print('Before : ')
print(a)

print('\nAfter : ')
b = np.array(a, dtype = float)
print(b)
print(b.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="37"></a>
        <font><b>Task 37:</b></font>
        <br><br>
        2D list to numpy array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 37. 2D list to numpy array

a = [[0, 1, 2], [21, 22, 23]]
print('Before : ')
print(a)
print(type(a))

print('\nAfter : ')
b = np.array(a)
print(b)
print(type(b))
print(b.dtype)
print(b.shape)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="38"></a>
        <font><b>Task 38:</b></font>
        <br><br>
        Convert list to float numpy array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 38. Convert list to float numpy array

x = [1, 2]
print('Before : ')
print(x)
print(type(x))

print('\nAfter : ')
b = np.asfarray(x)
print(b)
print(type(b))
print(b.dtype)

print('\nAfter : ')
c = np.asarray(x, float)
print(c)
print(type(c))
print(c.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="39"></a>
        <font><b>Task 39:</b></font>
        <br><br>
        Convert list to numpy array with explicit datatype
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 39. Convert list to numpy array with explicit datatype

x = [1, 2]
print('Before : ')
print(x)
print(type(x))

print('\nAfter : ')
c = np.asarray(x, float)
print(c)
print(type(c))
print(c.dtype)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="40"></a>
        <font><b>Task 40:</b></font>
        <br><br>
        Find common values between two numpy array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 40. Find common values between two numpy array

a = np.random.randint(0, 10, 10)
b = np.random.randint(0, 10, 10)
print(a)
print(b)
print('common values between a and b : ', np.intersect1d(a,b))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="41"></a>
        <font><b>Task 41:</b></font>
        <br><br>
        Get today in numpy and deltas
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 41. Get today in numpy and deltas

today = np.datetime64('today', 'D')
print('today          : ', today)

after2days = np.datetime64('today', 'D') + np.timedelta64(2, 'D')
print('after 2 days   : ', after2days)

before3days = np.datetime64('today', 'D') - np.timedelta64(3, 'D')
print('before 3 days  : ', before3days)

after1week = np.datetime64('today', 'D') + np.timedelta64(1, 'W')
print('after 1 week   : ', after1week)

after10weeks = np.datetime64('today', 'D') + np.timedelta64(10, 'W')
print('after 10 weeks : ', after10weeks)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="42"></a>
        <font><b>Task 42:</b></font>
        <br><br>
        Between two Dates
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 42. Between two Dates

a = np.arange('2020-09-15', '2020-09-25', dtype='datetime64[D]')
print('Between two dates : 2020-09-15 and 2020-09-25')
print(a)

a = np.arange('2020-09', '2020-10', dtype='datetime64[D]')
print('\nBetween 2 months : 2020-09 and 2020-10')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="43"></a>
        <font><b>Task 43:</b></font>
        <br><br>
        Random array and sorting
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 43. Random array and sorting

a = np.random.random(5)

print('Before : ')
print(a)

a.sort()
print('\nAfter : ')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="44"></a>
        <font><b>Task 44:</b></font>
        <br><br>
        Random int array and sorting
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 44. Random int array and sorting

a = np.random.randint(50, 100, 5)

print('Before : ')
print(a)

a.sort()
print('\nAfter : ')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="45"></a>
        <font><b>Task 45:</b></font>
        <br><br>
        String to nump,y array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 45. String to nump,y array

from io import StringIO

content = StringIO('''
1, 2, 3
6, ,  8
20, , 20
''')
a = np.genfromtxt(content, delimiter=",", dtype=np.int)
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="46"></a>
        <font><b>Task 46:</b></font>
        <br><br>
        Find the nearest element in the array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 46. Find the nearest element in the array

a = np.arange(10, 60, 7)
print(a)

b = 23
c = a.flat[np.abs(a - b).argmin()]
print(f'Elemenet near by {b} : {c}')

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="47"></a>
        <font><b>Task 47:</b></font>
        <br><br>
        Swap rows
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 47. Swap rows

a = np.arange(9).reshape(3, 3)
print('Before : ')
print(a)

a[[0,1]] = a[[1, 0]]

print('\nAfter : ')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="48"></a>
        <font><b>Task 48:</b></font>
        <br><br>
        Shuffle
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 48. Shuffle

a = np.arange(20)
print('Before : ')
print(a)

np.random.shuffle(a)

print('\nAfter : ')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="49"></a>
        <font><b>Task 49:</b></font>
        <br><br>
        Get specific element
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 49. Get specific element

a = np.arange(27).reshape(3, 3, 3)
print(a)

print(a[0, 1, 1])

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="50"></a>
        <font><b>Task 50:</b></font>
        <br><br>
        Repeat an array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 50. Repeat an array

a = np.array([[1, 2, 3]])
print('Before : ')
print(a)

b = np.repeat(a, 3, axis=0)
print('\nAfter : ')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="51"></a>
        <font><b>Task 51:</b></font>
        <br><br>
        Min, Max, Sum
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 51. Min, Max, Sum

a = np.arange(6).reshape(2, 3)
a += 1
print(a)

a_mean = np.min(a)
print('Mean : ', a_mean)

a_max = np.max(a)
print('Max : ', a_max)

a_sum = np.sum(a)
print('Sum : ', a_sum)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="52"></a>
        <font><b>Task 52:</b></font>
        <br><br>
        Get min of axis = 1
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 52. Get min of axis = 1

x = np.arange(10).reshape((2, 5))

print('x:')
print(x)

print('\nx.min(axis = 1) : ')
print(x.min(axis = 1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="53"></a>
        <font><b>Task 53:</b></font>
        <br><br>
        Using amin function
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 53. Using amin function

x = np.arange(10).reshape((2, 5))
print('x:')
print(x)

print('\nnp.amin(x, 1) : ')
print(np.amin(x, 1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="54"></a>
        <font><b>Task 54:</b></font>
        <br><br>
        Using amax function
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 54. Using amax function

x = np.arange(10).reshape((2, 5))
print('x:')
print(x)

print('\nnp.amax(x, 1) : ')
print(np.amax(x, 1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="55"></a>
        <font><b>Task 55:</b></font>
        <br><br>
        Get min of axis = 0
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 55. Get min of axis = 0

x = np.arange(6).reshape((2, 3))
print('x:')
print(x)

print('\nx.min(axis = 0) : ')
print(x.min(axis = 0))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="56"></a>
        <font><b>Task 56:</b></font>
        <br><br>
        Calculate 90th percentile of an axis
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 56. Calculate 90th percentile of an axis

x = np.arange(6).reshape((2, 3))
print('x:')
print(x)

print('\nnp.percentile(x, 90, 0): ')
print(np.percentile(x, 90, 0))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="57"></a>
        <font><b>Task 57:</b></font>
        <br><br>
        Find median
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 57. Find median

x = np.arange(6).reshape((2, 3))
print('x:')
print(x)

print('\nnp.median(x): ')
print(np.median(x))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="58"></a>
        <font><b>Task 58:</b></font>
        <br><br>
        Covariance matrix
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 58. Covariance matrix

x = np.array([0, 1, 2])
y = np.array([7, 8, 9])

print('x:')
print(x)
print('\ny:')
print(y)

print('\nnp.cov(x, y): ')
print(np.cov(x, y))

# note: -1 means perfectly in opposite directions

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="59"></a>
        <font><b>Task 59:</b></font>
        <br><br>
        Pearson product-moment correlation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 59. Pearson product-moment correlation

x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print('x:')
print(x)
print('\ny:')
print(y)

print('\nnp.corrcoef(x, y): ')
print(np.corrcoef(x, y))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="60"></a>
        <font><b>Task 60:</b></font>
        <br><br>
        Cross correlation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 60. Cross correlation

x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print('x:')
print(x)
print('\ny:')
print(y)

print('\nnp.correlate(x, y): ')
print(np.correlate(x, y))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="61"></a>
        <font><b>Task 61:</b></font>
        <br><br>
        Count the number of occurrences
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 61. Count the number of occurrences

x = np.array([1, 2, 2, 1, 1, 1, 5, 5])

print('x:')
print(x)

print('\nnp.bincount(x): ')
print(np.bincount(x))

# how to interpret

#    starts from 0
#    ends with 5
    
#    0 appears 0 times
#    1 appears 4 times
#    ...

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="62"></a>
        <font><b>Task 62:</b></font>
        <br><br>
        Create random int numpy array with specific shape
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 62. Create random int numpy array with specific shape

x = np.random.randint(10, 20, (4, 2))

print('np.random.randint(10, 20, (4, 2)):\n')
print(x)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="63"></a>
        <font><b>Task 63:</b></font>
        <br><br>
        Create 4 different integers from 0, 40.
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 63. Create 4 different integers from 0, 40. 

x = np.random.choice(40, 4, replace = False)

print('np.random.choice(40, 4, replace = False):\n')
print(x)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="64"></a>
        <font><b>Task 64:</b></font>
        <br><br>
        Create 4 different integers from 0, 4. (It will throw error as we can't get 5 unique integers from 4)
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 64. Create 4 different integers from 0, 4. (It will throw error as we can't get 5 unique integers from 4)

try:
    x = np.random.choice(4, 5, replace = False)
    
    print('np.random.choice(4, 5, replace = False):\n')
    print(x)
except Exception as err:
    print('Error : ', err)

# It is expected to throw an error

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="65"></a>
        <font><b>Task 65:</b></font>
        <br><br>
        Shuffle
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 65. Shuffle

x = np.arange(10)

print('x Before shuffling:')
print(x)

print('\nx After shuffling:')
np.random.shuffle(x)
print(x)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="66"></a>
        <font><b>Task 66:</b></font>
        <br><br>
        Shuffling by permutation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 66. Shuffling by permutation

x = np.arange(10)

print('x Before shuffling (using permutation):')
print(x)

print('\nx After shuffling (using permutation):')
print(np.random.permutation(10))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="67"></a>
        <font><b>Task 67:</b></font>
        <br><br>
        Seed for random
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 67. Seed for random
np.random.seed(12)

a = np.random.rand(4)
print('Random array after first seed:')
print(a)

np.random.seed(12)
b = np.random.rand(4)
print('\nRandom array after second seed:')
print(b)

c = np.random.rand(4)
print('\nRandom array after no seed:')
print(c)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="68"></a>
        <font><b>Task 68:</b></font>
        <br><br>
        Get unique elements
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 68. Get unique elements

x = np.array([1, 2, 6, 4, 2, 3, 2])

print('x:')
print(x)

out, indices = np.unique(x, return_inverse=True)

print('\nunique elements of x:')
print(out)

unique, counts = np.unique(x, return_counts=True)
unique_dict = dict(zip(unique, counts))

print('\nunique elements and count:')
print(unique_dict)

import collections
col_counter = collections.Counter(x)
print('\nunique elements and count by collections.counter:')
print(col_counter)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="69"></a>
        <font><b>Task 69:</b></font>
        <br><br>
        Create a boolean array with a shape of x
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 69. Create a boolean array with a shape of x

x = np.array([0, 1, 2, 5, 0])
y = np.array([0, 1])

print('x:')
print(x)

print('\ny:')
print(y)

print('\nnp.in1d(x, y):')
print(np.in1d(x, y))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="70"></a>
        <font><b>Task 70:</b></font>
        <br><br>
        Find unique intersection
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 70. Find unique intersection

x = np.array([0, 1, 2, 5, 0])
y = np.array([0, 1, 4])

print('x:')
print(x)

print('\ny:')
print(y)

print('\nnp.intersect1d(x, y):')
print(np.intersect1d(x, y))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="71"></a>
        <font><b>Task 71:</b></font>
        <br><br>
        Find the diff
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 71. Find the diff

x = np.array([0, 1, 2, 5, 0])
y = np.array([0, 1, 4])

print('x:')
print(x)

print('\ny:')
print(y)

print('\nnp.setdiff1d(x, y):')
print(np.setdiff1d(x, y))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="72"></a>
        <font><b>Task 72:</b></font>
        <br><br>
        Trying to inverse a singular matrix
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 72. Trying to inverse a singular matrix

b = np.array([[2,3],[4,6]])

try:
    np.linalg.inv(b)
except Exception as err:
    print('Error : ', err)
    
# Note: Singular Matrix can't be inversed

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="73"></a>
        <font><b>Task 73:</b></font>
        <br><br>
        Find the union
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 73. Find the union

x = np.array([0, 1, 2, 5, 0])
y = np.array([0, 1, 4])

print('x:')
print(x)

print('\ny:')
print(y)

z = np.union1d(x, y)
print('\nnp.union1d(x, y):')
print(z)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="74"></a>
        <font><b>Task 74:</b></font>
        <br><br>
        Element Sum
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 74. Element Sum

x = np.array([0, 0, 1, 2, 1, 1, 0, 0, 0])
print('Original Array:')
print(x)

num_zeros = (x == 0).sum()
num_ones = (x == 1).sum()

print('\nzeros sum:')
print(num_zeros)

print('\nones sum:')
print(num_ones)

print('\nones sum by using list:')
x_list = list(x)
print(x_list.count(1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="75"></a>
        <font><b>Task 75:</b></font>
        <br><br>
        Pretty print - suppress the scientific notation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 75. Pretty print - suppress the scientific notation

x = np.array([1.2e-10, 2.1, 23])
print('Before:')
print(x)

np.set_printoptions(suppress = True)
print('\nAfter suppressing the scientific notation:')
print(x)

# reset
np.set_printoptions(suppress = False)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="76"></a>
        <font><b>Task 76:</b></font>
        <br><br>
        Print with decimal format
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 76. Print with decimal format

x = np.array([1.24500, 1.0000])
print('Before:')
print(x)

np.set_printoptions(formatter={'float': '{: 0.2f}'.format})
print('\nAfter formattting the float:')
print(x)

# Not sure how to reset it

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="77"></a>
        <font><b>Task 77:</b></font>
        <br><br>
        Convert flot array to int array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 77. Convert flot array to int array

x = np.array([[2.0, 8.8], [2.3, 1.9]])
print('Before:')
print(x)

y = x.astype(int)
print('\nAfter changing the datatype:')
print(y)

z = np.int_(x)
print('\nAfter changing the datatype by using int_:')
print(z)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="78"></a>
        <font><b>Task 78:</b></font>
        <br><br>
        array vs asarray
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 78. array vs asarray

x = np.matrix(np.ones((3,3)))
print('Before:')
print(x)


np.array(x)[2] = 2
print('\nAfter changing elements by array:')
print(x)

np.asarray(x)[2] = 2
print('\nAfter changing elements by asarray:')
print(x)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="79"></a>
        <font><b>Task 79:</b></font>
        <br><br>
        Numpy Datetime
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 79. Numpy Datetime

x = np.datetime64('2020-09-30')
print('Sample numpy datetime:')
print(x)
# print(type(x))

x1 = np.datetime64('2020-09', 'D')
print('\nNumpy Datetime with forcing D option:')
print(x1)
# print(type(x1))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="80"></a>
        <font><b>Task 80:</b></font>
        <br><br>
        Numpy Datetime with arange
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 80. Numpy Datetime with arange

x = np.arange('2020-02', '2020-06', dtype = 'datetime64[M]')
print('\nNumpy Datetime range with forcing month:')
print(x)


y = np.arange('2020-02', '2020-06', dtype = 'datetime64[D]')
print('\nNumpy Datetime range with forcing date:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="81"></a>
        <font><b>Task 81:</b></font>
        <br><br>
        Compare Numpy datetime
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 81. Compare Numpy datetime

print("np.datetime64('2020') == np.datetime64('2020-01-01'):")
print(np.datetime64('2020') == np.datetime64('2020-01-01'))

print("\nnp.datetime64('2020-01') == np.datetime64('2020-01-02'):")
print(np.datetime64('2020-01') == np.datetime64('2020-01-02'))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="82"></a>
        <font><b>Task 82:</b></font>
        <br><br>
        Numpy 2D array flat list
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 82. Numpy 2D array flat list

import numpy as np
from itertools import chain

a = np.arange(12).reshape(2, 3, 2)
print('Before:')
print(a)

b = a.tolist()
print('\nAfter tolist:')
print(b)

c = list(chain.from_iterable(a))
print('\nAfter flattening the array to list:')
print(c)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="83"></a>
        <font><b>Task 83:</b></font>
        <br><br>
        Numpy 2D array to flat list
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 83. Numpy 2D array to flat list

a = np.arange(6).reshape(2, 3)
print('Before:')
print(a)

b = list(a.flatten())
print('\nAfter flattening the array to list:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="84"></a>
        <font><b>Task 84:</b></font>
        <br><br>
        Numpy array to Pandas Dataframe
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 84. Numpy array to Pandas Dataframe

x = np.array([[90, 98], [92, 99]])
print('Numpy Array:')
print(x)

df = pd.DataFrame({'Maths': x[:, 0], 'Science': x[:, 1]})
print('\nDataframe from Numpy Array:')
print(df)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="85"></a>
        <font><b>Task 85:</b></font>
        <br><br>
        Numpy to Dataframe by using from_records
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 85. Numpy to Dataframe by using from_records

x = np.arange(6).reshape(2, -1) # -1 is used for lazy option
print('Numpy Array:')
print(x)

df = pd.DataFrame.from_records(x)
print('\nDataframe from Numpy Array by using from_records:')
print(df)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="86"></a>
        <font><b>Task 86:</b></font>
        <br><br>
        Append with hstack
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 86. Append with hstack

a = np.arange(6).reshape(2, -1)
print('Numpy Array:')
print(a)

b = np.hstack((a, np.zeros((a.shape[0], 1), dtype = a.dtype)))
print('\nAfter appending with hstack:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="87"></a>
        <font><b>Task 87:</b></font>
        <br><br>
        Ravel vs. Flatten
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 87. Ravel vs. Flatten

a = np.array([[1,2],[3,4]])
print('Original numpy array:')
print(a)

ravel_a = np.ravel(a)
flatten_a = np.ndarray.flatten(a)  

print('\nravel a:')
print(ravel_a)

print('\nflatten a:')
print(flatten_a)

print('\nravel a base:')
print(ravel_a.base)

print('\nflatten a base:')
print(flatten_a.base) # since it is a copy, you would see None as base

# Note: if view, you will see the original array in .base
# If is a copy, you will see None in .base

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="88"></a>
        <font><b>Task 88:</b></font>
        <br><br>
        Ravel and Flatten with assignment
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 88. Ravel and Flatten with assignment

a = np.array([[1,2],[3,4]])
print('Original numpy array, a:')
print(a)

ravel_a = np.ravel(a)
flatten_a = np.ndarray.flatten(a)  

print('\nravel a:')
print(ravel_a)

print('\nflatten a:')
print(flatten_a)

ravel_a[0] = 100
print('\nAfter changing ravel, a:')
print(a)

flatten_a[1] = 200
print('\nAfter changing flatten, a:')
print(a)

print('\nravel a base:')
print(ravel_a.base)

print('\nflatten a base:')
print(flatten_a.base) # since it is a copy, you would see None as base

# Note: if view, you will see the original array in .base
# If is a copy, you will see None in .base

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="89"></a>
        <font><b>Task 89:</b></font>
        <br><br>
        Numpy Concatenate
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 89. Numpy Concatenate

a = np.arange(4).reshape(2, -1)
b = np.array([[5, 6]])

print('a:')
print(a)

print('\nb:')
print(b)

# appending as a row
c = np.concatenate((a, b), axis = 0)
print('\nAfter appending as a row:')
print(c)


# appending as a colum
d = np.concatenate((a, b.T), axis = 1)
print('\nAfter appending as a colum:')
print(d)


e = np.concatenate((a, b), axis = None)
print('\nAfter flatteeing and appending:')
print(e)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="90"></a>
        <font><b>Task 90:</b></font>
        <br><br>
        Reverse 1D array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 90. Reverse 1D array

x = np.arange(4)
print('Before:')
print(x)

y = x[::-1]
print('\nAfter reversing:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="91"></a>
        <font><b>Task 91:</b></font>
        <br><br>
        Reverse 2D Array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 91. Reverse 2D Array

x = np.arange(8).reshape(2, -1)
print('Before:')
print(x)

y = x[::-1]
print('\nAfter reversing:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="92"></a>
        <font><b>Task 92:</b></font>
        <br><br>
        Reverse 2D array with elements
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 92. Reverse 2D array with elements

x = np.arange(8).reshape(2, -1)
print('Before:')
print(x)

y = np.flip(x)
print('\nAfter reversing with flip:')
print(y)

y = np.flipud(x)
print('\nAfter reversing with flipud:')
print(y)

y = np.fliplr(x)
print('\nAfter reversing with fliplr:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="94"></a>
        <font><b>Task 94:</b></font>
        <br><br>
        Array with prefilled values
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 94. Array with prefilled values

a = np.full((2, 4), 23)
print('Array with prefilled values:')
print(a)

b = np.empty((2, 4), dtype = int)
b.fill(23)
print('\nArray with prefilled values by using empty and fill:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="95"></a>
        <font><b>Task 95:</b></font>
        <br><br>
        Delete specific indices
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 95. Delete specific indices

a = np.array([1, 3, 5, 4, 7])
print('Before:')
print(a)

indices = [2, 3]
b = np.delete(a, indices)

print('\nAfter Deleting specific indices:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="96"></a>
        <font><b>Task 96:</b></font>
        <br><br>
        Deleting specific elements
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 96. Deleting specific elements

a = np.array([1, 4, 5, 4])
print('Before:')
print(a)

b = np.array([3, 4])
c = np.setdiff1d(a, b)

print('\nAfter Deleting specific elements:')
print(c)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="97"></a>
        <font><b>Task 97:</b></font>
        <br><br>
        Boolean Numpy Array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 97. Boolean Numpy Array

a = np.ones((2, 2), dtype = bool)
print('True Boolean Array:')
print(a)

b = np.zeros((2, 3), dtype = bool)
print('\nFalse Boolean Array:')
print(b)

c = np.full((2, 4), True)
print('\nTrue Boolean Array by using .full:')
print(c)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="98"></a>
        <font><b>Task 98:</b></font>
        <br><br>
        Array of NaN
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 98. Array of NaN

a = np.empty((3, 2,))
a[:] = np.nan
print('nan using empty:')
print(a)

b = np.full([3, 2], np.nan)
print('\nnan using full:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="99"></a>
        <font><b>Task 99**:</b></font>
        <br><br>
        Replace values with specific condition
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 99. Replace values with specific condition

import numpy as np
a = np.random.rand(2, 4)
print('Before:')
print(a)

a[a > 0.5] = 0.5
print('\nAfter updating a[a > 0.5] = 0.5:')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="100"></a>
        <font><b>Task 100:</b></font>
        <br><br>
        Selecting specific columns
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 100. Selecting specific columns

x = np.arange(12).reshape(3, 4)
print('Before:')
print(x)

y = x[:, [1, 3]]
print('\nAfter selecting specific columns:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="101"></a>
        <font><b>Task 101:</b></font>
        <br><br>
        Vectorize
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 101. Vectorize

aa = np.array([[1,2,3,4], [2,3,4,5], [5,6,7,8], [9,10,11,12]])
bb = np.array([[100,200,300,400], [100,200,300,400], [100,200,300,400], [100,200,300,400]])

def vec2(a, b):
    return a + b

func2 = np.vectorize(vec2)
print(func2(bb[:,1], aa[:,1]))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="102"></a>
        <font><b>Task 102:</b></font>
        <br><br>
        If condition on Numpy array on the fly
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 102. If condition on Numpy array on the fly

a = np.arange(6).view([('b', np.int),('c', np.int)])

print(a)

print(a['b'] < 4)

print((a['b'] < 4).sum())

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="103"></a>
        <font><b>Task 103:</b></font>
        <br><br>
        If condition and sum on Numpy colum
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 103. If condition and sum on Numpy colum

a = np.random.randint(0, 10, 20).reshape(4, 5)

print('Original Array:')
print(a)

# How many elements in column 3 are greater than 2?
b = a[:, 1] > 2

print('\nPrinting elements in colmns which are greater than 2: ')
print(b)

print('\nPrinting elements\' sum in colmns which are greater than 2: ')
print(b.sum())

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="104"></a>
        <font><b>Task 104:</b></font>
        <br><br>
        Using Vectorize function on Numpy
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 104. Using Vectorize function on Numpy

def get_max(a, b):
    
    if (a > b): 
        return a
    
    return b
    
b_vectfunc = np.vectorize(get_max)
x = [[1, 2, 3], [4, 7, 2]]
y = [7, 4, 5]

result = b_vectfunc(x, y)

print(result)

# Note: It will compare the array element wise and get the max value

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="105"></a>
        <font><b>Task 105:</b></font>
        <br><br>
        Apply Along Axis on Numpy Matrix
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 105. Apply Along Axis on Numpy Matrix

def get_avg(a):
    return (a[0] + a[-1]) / 2

a = np.random.randint(1, 10, 9).reshape(3, 3)

print('Original array:')
print(a)

b = np.apply_along_axis(get_avg, 0, a)

print('\nAfter averaging the first and last element:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="106"></a>
        <font><b>Task 106:</b></font>
        <br><br>
        Sort the arry by using 
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 106. Sort the arry by using 

a = np.random.randint(1, 10, 9).reshape(3, 3)

print('Original Array :')
print(a)

b = np.apply_along_axis(sorted, 0, a)

print('\nAfter sorting :')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="107"></a>
        <font><b>Task 107:</b></font>
        <br><br>
        Numpy Roll
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 107. Numpy Roll

import numpy as np

x = np.arange(1, 7).reshape(2, 3)

print(x)

y = np.roll(x, 1, axis = 1)

print('\nAfter:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="108"></a>
        <font><b>Task 108:</b></font>
        <br><br>
        Roll elements
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 108. Roll elements

x = np.arange(10)
y = np.roll(x, 2)

print(x)

print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="109"></a>
        <font><b>Task 109:</b></font>
        <br><br>
        Array Append on Axis 0 and Axis 1
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 109. Array Append on Axis 0 and Axis 1

a = np.array([1, 2])
b = np.array([3, 4])

print('Array a:')
print(a)

print('\nArray b:')
print(b)

c = np.append([a], [b], axis = 0)
print('\nArray c : append a and b on axis 0:')
print(c)

d = np.append([a], [b], axis = 1)
print('\nArray d : append a and b on axis 1:')
print(d)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="110"></a>
        <font><b>Task 110:</b></font>
        <br><br>
        Rearrange array with specified index
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 110. Rearrange array with specified index

a = np.array([11, 22, 33, 44, 55])
print('Before:')
print(a)

idx = [4, 2, 0, 1, 3]

b = a[idx]

print('\nAfter:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="111"></a>
        <font><b>Task 111:</b></font>
        <br><br>
        Serialize array with pickle
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 111. Serialize array with pickle

a = np.array([10, 20])
print('Before:')
print(a)

import pickle

b = pickle.dumps(a, protocol = 4)

print('\nSerialized Numpy Array:')
print(b)

c = pickle.loads(b)

print('\nDe-serialized Numpy Array:')
print(c)

# Check protocols here: https://docs.python.org/3/library/pickle.html

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="112"></a>
        <font><b>Task 112:</b></font>
        <br><br>
        Transpose
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 112. Transpose

a = np.arange(6).reshape(2, -1) 

print('Before:')
print(a)

b = np.transpose(a)
print('\nAfter:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="113"></a>
        <font><b>Task 113:</b></font>
        <br><br>
        Continguous Array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 113. Continguous Array

a = np.ascontiguousarray(np.random.randint(0, 10, 5))
print(a)
print(a.flags)

b = np.array(np.random.randint(0, 10, 5))
print(b)
print(b.flags)

# Note: Not sure where we can use this option. I will do some research and update things here

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="114"></a>
        <font><b>Task 114:</b></font>
        <br><br>
        Numpy Reshape with Order
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 114. Numpy Reshape with Order

import numpy as np

X = np.arange(12).reshape(6, 2)
print('Original:')
print(X)

Y = X.reshape(3, 2, 2, order = 'F')
print('\nReshape with Order F:')
print(Y)

# Options: 
# 'C' - # C-like index ordering
# 'F' - # Fortran-like index ordering
# 'A' - # Mixed Fortran or C (check docucmnetation for more)
# 'K' - ?

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="115"></a>
        <font><b>Task 115:</b></font>
        <br><br>
        Element-wise math
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 115. Element-wise math

a = np.arange(6).reshape(3, 2)
print('Before:')
print(a)

# b = x^2 + y^2
b = (np.array(a) ** 2).sum(-1)
print('\nAfter:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="116"></a>
        <font><b>Task 116:</b></font>
        <br><br>
        Where with multiple condition
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 116. Where with multiple condition

dt = 1.0
a = np.arange(0.0, 5.0, dt)
print('Original:')
print(a)

# if a is less than 3 and greater than 0, multiply by 2 or else multiply by 4
b = np.where((a >= 0) & (a < 3), 2 * dt, 4 * dt)
print('\nAfter:')
print(b)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="117"></a>
        <font><b>Task 117:</b></font>
        <br><br>
        Subtract Outer
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 117. Subtract Outer

a, b = [2,7,8], [1,9]

c = np.abs(np.subtract.outer(a, b))
print('Original:')
print(c)

d = c.ravel()
print('\nAfter ravel:')
print(d)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="118"></a>
        <font><b>Task 118:</b></font>
        <br><br>
        Multiply Outer
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 118. Multiply Outer

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

c = np.multiply.outer(a, b)

print(c)

d = c.ravel()
print(d)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="119"></a>
        <font><b>Task 119:</b></font>
        <br><br>
        Immutable Array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 119. Immutable Array

a = np.arange(6)
a.flags.writeable = False

print('Before:')
print(a)

a[0] = 1 # this will throw ValueError: assignment destination is read-only

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="120"></a>
        <font><b>Task 120:</b></font>
        <br><br>
        Float anomalies in Numpy Arange
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 120. Float anomalies in Numpy Arange

for i in np.arange(0.0, 2.1, 0.1):
    print(i)
    
# source: 
# https://docs.python.org/3/tutorial/floatingpoint.html
# https://stackoverflow.com/questions/63824157/while-using-np-arange-it-was-incrementing-with-wrong-step-size

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="121"></a>
        <font><b>Task 121:</b></font>
        <br><br>
        Complex number and absolute value
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 121. Complex number and absolute value

x = np.array(1.1 - 0.2j)
print('Original:')
print(x)

print('\nDatatype:')
print(x.dtype)

y = np.abs(x)
print('\nAbsolute Value:')
print(y)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="122"></a>
        <font><b>Task 122:</b></font>
        <br><br>
        Set Error in Numpy
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 122. Set Error in Numpy

np.seterr(all = "ignore")
a = np.mean([])  # this will be okay as we set the `ignore` option
print('Mean of empty array:')
print(a)

print('\nAfter setting error:')
np.seterr(all = "raise")
try:
    a = np.mean([])
except FloatingPointError as err:
    print('FloatingPointError: ', err)
    
# other options: 'ignore’, ‘warn’, ‘raise’, ‘call’, ‘print’, ‘log’

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="123"></a>
        <font><b>Task 123:</b></font>
        <br><br>
        Convert List of List String to Numpy Array
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 123. Convert List of List String to Numpy Array

import re

a_list = '''
[[25  3  2]
 [ 1 21  0]
 [ 1  0  0]]
'''

print('Original String:')
print(a_list)

rows = []

for line in filter(len, map(str.strip, a_list.split("\n"))):
    rows.append([ int(v) for v in re.findall(r"\b[0-9]+\b", line) ])

np_rows = np.array(rows)
print('\nAfter converting string to Numpy Array:')
print(np_rows)

# do this opeartion just to verify
np_rows += 2

print('\nAfter converting string to Numpy Array and add 2 in all elements:')
print(np_rows)

print('\nDatatype:')
print(type(np_rows))

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="124"></a>
        <font><b>Task 124:</b></font>
        <br><br>
        Resize a list with rounds
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 124. Resize a list with rounds

a_list = [10, 20, 30]
result = np.resize(a_list, 12)

print(result)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="125"></a>
        <font><b>Task 125:</b></font>
        <br><br>
        Print columns by index
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 125. Print columns by index

x = np.array([[1,10,11],[12,0,3]])
print('Original:')
print(x)

print('\nPrinting Cols with Index:')
for i in range(3):
    print(i, x[:,i])

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="126"></a>
        <font><b>Task 126:</b></font>
        <br><br>
        Initalize array with tuples
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 126. Initalize array with tuples

a = np.full((3,2), np.nan, dtype='f,f')
print('Original:')
print(a)


a[0] = (12, 2)
print('\nAfter setting up a tuple:')
print(a)

"""<div style="">
    <div style="float: left; width: 80%;">
        <a id="127"></a>
        <font><b>Task 127:</b></font>
        <br><br>
        Rearrange with permutation
    </div>
    <div style="float: right;">
        <a href="#top" class="btn btn-primary btn-sm" role="button" aria-pressed="true" style="color:white" data-toggle="popover" title="go to Top">Go to Top</a>
    </div>
    <br style="clear: left;" />
</div>
"""

# 127. Rearrange with permutation

a = np.array([[10, 20, 30],
                  [100, 200, 300]])

print('Original:')
print(a)

permutation = [1, 0]
b = a[permutation]
print('\nAfer:')
print(b)

# 128. Squeeze 1

x = np.array([[[0, 2], [1, 2], [2, 3]]])
print('Original:')
print(x)
print('\nShape:', x.shape)

y = np.squeeze(x)
print('\nAfter Squeezing:')
print(y)
print('\nShape:', y.shape)

# 129. Squeeze 2

x = np.array([[[0], [1], [2]]])
print('Original:')
print(x)
print('\nShape:', x.shape)

y = np.squeeze(x)
print('\nAfter Squeezing:')
print(y)
print('\nShape:', y.shape)

# 130. Convert Array indices to One Hot Encoded

a = np.array([1, 2, 4, 0])
print('Original:')
print(a)

b = np.zeros((a.size, a.max() + 1))
b[np.arange(a.size), a] = 1

print('\nAfter:')
print(b)

# 131. Business Day Count

a = np.busday_count('2020-01', '2021-01')

print(a)

# 132. Multinomial 1

size   = 11
levels = 6
a = np.random.multinomial(size, np.ones(levels)/levels, size=1)

print(a)

# 133. Multinomial 2

b = np.random.multinomial(20, [1/6.]*6, size=1)
print(b)

# How to interpret?
# Assuue, you throw dice 20 times, if you get a result [[2 3 1 5 3 6]], it means
# You got 1 for 2 times
# You got 2 for 3 times

# 134. Random Generator - Draw samples from Beta Distribution

from numpy.random import default_rng

rng = default_rng()

a = np.array([1, 2, 3])
b = np.array([7, 8, 9])

rng.beta(a + 10, b + 10)

# Doc: https://numpy.org/doc/stable/reference/random/index.html
# https://numpy.org/doc/stable/reference/random/generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta

# 135. Get only unique

import numpy as np

a = np.array(['a', 'b', 'b', 'c', 'c', 'd', 'd'])
print('Original:')
print(a)

b = np.unique(a)
print('\nUnique:')
print(b)

# 136. Find indices with SearchSorted

import numpy as np

a = np.searchsorted([1,2,3,4,5], 3)
print('np.searchsorted([1,2,3,4,5], 3):')
print(a)


b = np.searchsorted([1,2,3,4,5], [7, 2, 3])
print('\nnp.searchsorted([1,2,3,4,5], [7, 2, 3]):')
print(b)

# 137. Loop list by using itertools.cycle

import itertools

a_list = ["CA", "ON", "NY"]
print('Original:')
print(a_list)

rounds = 5
ic = itertools.cycle(a_list)

a = [next(ic) for _ in range(rounds)]
print('\nAfter looping 5 rounds:')
print(a)

# You can do the same in Numpy resize to get Numpy Array
b = np.resize(a_list, rounds)
print('\nAfter looping 5 rounds by using Numpy Resize:')
print(b)

# 138. Applying Triu function

import numpy as np

a = np.matrix([[1,2,3],[4,5,6],[7,8,9]])
print("Original:")
print(a)

print("\ntriu() without any parameter:")
print(np.triu(a))

print("\nAbove 1st diagonal zeroed:")
print(np.triu(a, 1))

print("\nBelow 1st diagonal zeroed:")
print(np.triu(a, -1))

# 139. Unpack list elements

a_list = [[1, 2, 3], [4, 5, 6]]
b_list = np.concatenate(a_list).ravel()

print(b_list)

# 140. Partitioning

a = np.array([8, 4, 2, 3, 1, 7, 10, 12])
print('Original:')
print(a)

b = np.partition(a, 5)
print('\nAfter partitioning:')
print(b)

# 141. Expand Dimension

import numpy as np
a = np.array([2, 4])
print('Original:')
print(a)
print('\nShape:')
print(a.shape)

b = np.expand_dims(a, axis = 0)
print('\nAfter expanding dim:')
print(b)
print('\nShape:')
print(b.shape)

# 142. Gradient sample

a = np.array([1, 3, 4], dtype = float)
print('Original:')
print(a)

b = np.gradient(a)
print('\nAfter np.gradient(a):')
print(b)

c = np.gradient(a, 2)
print('\nAfter np.gradient(a, 2):')
print(c)

# 143. 

a = np.array([[10, 20], [30, 40]])
print('Original:')
print(a)

b = a.flatten()
print('\nAfter flatten:')
print(b)

c = a.flatten('F')
print('\nAfter flatten with F:')
print(c)

# 144. Check atlas

import numpy.distutils.system_info as sysinfo
sysinfo.get_info('atlas')

# 145. Check Numpy Configuration

np.show_config()

